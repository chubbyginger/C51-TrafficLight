C51 COMPILER V9.60.0.0   BUFFERED_UART                                                     08/09/2024 16:04:08 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE BUFFERED_UART
OBJECT MODULE PLACED IN .\Objects\buffered_uart.obj
COMPILER INVOKED BY: D:\ProgFiles\Keil_v5\C51\BIN\C51.EXE 8051-buffered-uart-master\buffered_uart.c OPTIMIZE(8,SPEED) BR
                    -OWSE DEBUG OBJECTEXTEND PRINT(.\Listings\buffered_uart.lst) TABS(2) OBJECT(.\Objects\buffered_uart.obj)

line level    source

   1          /*
   2          buffered_uart.h的实现文件
   3          请务必明确单片机的时钟频率，并相应修改CLK_FREQ_100HZ
   4          CLK_FREQ_100HZ是晶振频率的百分之一
   5          */
   6          
   7          #define CLK_FREQ_100HZ 110592
   8          
   9          #include "buffered_uart.h"
  10          #include <reg51.h>
  11          
  12          #define INTERRUPT_NO 4
  13          
  14          typedef struct
  15          {
  16              uint8* buffer;
  17              uint8 max;
  18              uint8 start;
  19              uint8 len;
  20          }
  21          queue;
  22          
  23          static uint8 queue_read(queue* p_queue)
  24          {
  25   1          uint8 t_data;
  26   1          if(p_queue->len==0)
  27   1              return 0;
  28   1          t_data=p_queue->buffer[p_queue->start];
  29   1          ++p_queue->start;
  30   1          --p_queue->len;
  31   1          if(p_queue->start==p_queue->max)
  32   1              p_queue->start=0;
  33   1          return t_data;
  34   1      }
  35          
  36          static void queue_write(queue* p_queue,uint8 p_data)
  37          {
  38   1          uint8 t_pos,t_rest;
  39   1          if(p_queue->len==p_queue->max)
  40   1              return;
  41   1          t_rest=p_queue->max-p_queue->len;
  42   1          if(p_queue->start<t_rest)
  43   1              t_pos=p_queue->start+p_queue->len;
  44   1          else
  45   1              t_pos=p_queue->start-t_rest;
  46   1          p_queue->buffer[t_pos]=p_data;
  47   1          ++p_queue->len;
  48   1      }
  49          
  50          static queue sg_recv;
  51          bool sg_overflow;
  52          bool sg_sending;
  53          
  54          static void on_uart_interrupt() interrupt INTERRUPT_NO
C51 COMPILER V9.60.0.0   BUFFERED_UART                                                     08/09/2024 16:04:08 PAGE 2   

  55          {
  56   1          if(RI==1)
  57   1          {
  58   2              if(sg_recv.len==sg_recv.max)
  59   2                  sg_overflow=1;
  60   2              else
  61   2                  queue_write(&sg_recv,SBUF);
  62   2              RI=0;
  63   2          }
  64   1          else if(TI==1)
  65   1          {
  66   2              sg_sending=0;
  67   2              TI=0;
  68   2          }
  69   1      }
  70          
  71          void uart_init(uint16 p_baud,uint8* p_buffer,uint8 p_capacity)
  72          {
  73   1          uint8 t_timer=0;
  74   1          #define SWITCH_TIMER(baud) {if(p_baud==baud) \
  75   1                  t_timer=CLK_FREQ_100HZ/192*100/baud;}
  76   1          SWITCH_TIMER(300)
  77   1          SWITCH_TIMER(600)
  78   1          SWITCH_TIMER(1200)
  79   1          SWITCH_TIMER(2400)
  80   1          SWITCH_TIMER(4800)
  81   1          SCON=0x50;//8-n-1
  82   1          PCON|=0x80;//SMOD=1,倍频
  83   1          TMOD&=0x0F;
  84   1          TMOD|=0x20;//这两句，把TMODE高4为置为0020，即timer1工作在模式2
  85   1          TH1=TL1=256-t_timer;
  86   1          TR1=1;
  87   1          PS=1;
  88   1          ES=1;
  89   1          EA=1;
  90   1          sg_recv.buffer=p_buffer;
  91   1          sg_recv.max=p_capacity;
  92   1          sg_recv.start=0;
  93   1          sg_recv.len=0;
  94   1          sg_overflow=0;
  95   1          sg_sending=0;
  96   1      }
  97          
  98          void uart_close()
  99          {
 100   1          TR1=0;
 101   1          ES=0;
 102   1      }
 103          
 104          uint8 uart_available()
 105          {
 106   1          return sg_recv.len;
 107   1      }
 108          
 109          uint8 uart_read()
 110          {
 111   1          uint8 t_data;
 112   1          ES=0;
 113   1          t_data=queue_read(&sg_recv);
 114   1          ES=1;
 115   1          return t_data;
 116   1      }
C51 COMPILER V9.60.0.0   BUFFERED_UART                                                     08/09/2024 16:04:08 PAGE 3   

 117          
 118          bool uart_is_overflow()
 119          {
 120   1          return sg_overflow;
 121   1      }
 122          
 123          void uart_overflow_reset()
 124          {
 125   1          ES=0;
 126   1          sg_overflow=0;
 127   1          ES=1;
 128   1      }
 129          
 130          void uart_write(uint8 p_data)
 131          {
 132   1          while(sg_sending);
 133   1          ES=0;
 134   1          sg_sending=1;
 135   1          SBUF=p_data;
 136   1          ES=1;
 137   1      }
 138          
 139          void uart_print(char* p_string)
 140          {
 141   1          while(*p_string)
 142   1          {
 143   2              uart_write(*p_string);
 144   2              ++p_string;
 145   2          }
 146   1      }
 147          
 148          void uart_println(char* p_string)
 149          {
 150   1          uart_print(p_string);
 151   1          uart_write('\r');
 152   1        uart_write('\n');
 153   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    453    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
